#!/bin/bash
VERSION=1.6
# trash - the command line trashcan
#
# Copyright (C) 2011-13 Klaatu la Terible
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.

# find the system trash
case "$(uname | tr [:upper:] [:lower:] )" in
    linux|bsd|sun) BASKET=~/.local/share/Trash ;;
    darwin) BASKET=~/.Trash ;; # TODO check when around a mac
    *) BASKET=~/.trash ;;
esac

test -d $BASKET/info || mkdir -m 700 -p $BASKET/info 2> /dev/null
test -d $BASKET/files || mkdir -m 700 -p $BASKET/files 2> /dev/null

# empty function
empty() {
    CHECK=$(ls "${BASKET}/files/" )

# is trash already empty?
    if [ "X$CHECK" = "X" ]; then
	echo "You have no files in trash."
    fi

    if [ "X$DRYRUN" = "X1" ]; then
	echo "Pretending to remove: $CHECK"
	ACT="echo"
	KILL=""
    else
	KILL="-delete"
	ACT="find"
    fi

# process verbosity and dry-run options
    $ACT $BASKET -mindepth 1 $KILL
    exit
}

list() {
    ls ${BASKET}/files
}

version() {
    echo "Trashy, version $VERSION GPLv3"
}

# default action
ACT=${ACT:-mv}

# process verbose and help and dryrun options
while [ True ]; do
if [ "$1" = "--help" -o "$1" = "-h" ]; then
    echo " "
    echo "trash [--verbose|--dry-run|--empty|--list|--restore] foo"
    echo " "
    exit
elif [ "$1" = "--verbose" -o "$1" = "-v" ]; then
    VERBOSE="-v"
    shift 1
elif [ "$1" = "--list" -o "$1" = "-l" ]; then
    list
    shift 1
elif [ "$1" = "--version" -o "$1" = "-w" -o "$1" = "--which" ]; then
    version
    shift 1
elif [ "$1" = "--dryrun" -o "$1" = "-d" -o "$1" = "--dry-run" ]; then
    ACT="echo"
    DRYRUN=1
    shift 1
elif [ "$1" = "--empty" -o "$1" = "-e" -o "$1" = "--pitch" ]; then
    empty
elif [ "$1" = "--restore" -o "$1" = "-r" ]; then
    RESTORE=1
    shift 1
else
    break
fi
done

# TODO
# if source begins with /run or /media or /mnt ;then
# warn the person that trashing it is copying it from
# that external media onto local drive and do they really
# want to do that?
# either that or we have to make .trash on that device.
# not sure if that is appropriate either.

# sanitize input filenames
ARG="${@}"
set -e

RUBBISH=(${ARG})

if [ "X$RUBBISH" = "X" ]; then
    TOTAL=1
fi

# pitch it
if [ "X$ARG" != "X" ]; then
    for waste in ${ARG[*]} ; do
	ORIGIN=$(realpath "${waste}")
	if [ ! -z $RESTORE ]; then
	    $ACT $VERBOSE "$BASKET/files/`basename ${ORIGIN}`" $(grep ${waste} $BASKET/info/`basename ${ORIGIN}.trashinfo` | cut -d "=" -f2);
	    if [ -z $DRYRUN ]; then
		ACT="rm"
	    fi
	    $ACT $VERBOSE $BASKET/info/`basename ${ORIGIN}.trashinfo`
	else
	    $ACT $VERBOSE "${waste}" "$BASKET/files/`basename "${waste}"`" ;
	    echo "[Trash Info]" > $BASKET/info/`basename ${ORIGIN}.trashinfo`
	    echo "Path=${ORIGIN}" >> $BASKET/info/`basename ${ORIGIN}.trashinfo`
	    echo "DeletionDate=$(date +%Y-%m-%dT%T)" >> $BASKET/info/`basename ${ORIGIN}.trashinfo`
	fi
    done
fi

# tell the user what just happened
if [ "X$VERBOSE" == "X-v" ]; then
    echo "$BASKET is currently $(du -h $BASKET | cut -f1 | tail -n -1) in size."
fi
