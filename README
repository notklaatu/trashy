1. Introduction

Hi! right now you're looking at trashy, the sane rm intermediary.
This means that you've probably just done the unthinkable:
accidentally rm'd a super important file by accident and immediately
thereafter started cursing God, UNIX, GNU, computers, and yourself.

Never fear.  There is hope.

Well, not for your deleted file -- that's gone.  Sorry.  But from
now on, you'll never have to go through that ever again!


2. Usage

Trashy is a simple shell script that introduces the idea of a trash
can for the command line.  Meaning that you can issue this command:

trash foo

and foo will be moved to ~/.trash

Simple as that.  When you're really really sure that everything in
your .trash folder wants to be nuked out of existance, then you can
issue the command:

empty

and your .trash will be emptied.


3. Aliases

To help myself ease into the concept of the trash command, I literally
had to alias rm to trash for a while.  This works quite well, in
truth; and if you ever want to override your alias, simply use:

\rm foo

or

/bin/rm foo

Simple as that.

But until your muscle memory gets used to the idea that it's going to
be typing 'trash' instead of 'rm' when you want to delete a file, the
alias helps.  To have an alias installed along with trashy, simple
uncomment the alias block in the install.sh script.


4. Ditching the Alias

Eventually it will become tedious to you to work around the trash
command every time you really really do want to rm a file.  At that
point, you'll probably want to get rid of the alias.

Personally, I maintain an rm='rm -i' alias in ~/.bash_aliases just to
avoid any initial mishaps.

And then eventually I got rid of any aliasing so that the commands
were all really what they appeared to be.  rm to delete permanently,
trash to move to a trash bin.  It WILL take a while, if you're used to
rm, so do account for that.


5. System Integration

I would love to integrate trashy with the freedesktop.org Trash

http://www.ramendik.ru/docs/trashspec.html

But for now, we have the hack you see now.


6. Why trashy?

Trashy is BASHy, meaning that it's really really portable.  It can be
installed easily on GNU Linux, freeBSD, and Mac OS X.  Probably more,
but these are the systems I have tried it on.  In all three cases,
there are no real dependencies (except BASH on BSD but that's not so
terribly uncommon).

It's simple, but it works well and it works on lots of systems.
That's good enough for me.

Similar projects do exist.  The one I know of uses Python and has some
really neat and fancy features and probably already conforms to Free
Desktop specs.  Check it out if you're on a Linux box or if you don't
mind a bit of set-up on non Free Desktop UNIX systems.

http://code.google.com/p/trash-cli/


7. Bugs

Yes, there is one glaring horrible bug: trashy does not support
files with a SPACE in its name.  You can try to fool trashy with
quotes and wildcard characters, but I can't iron it out.  I can
give you support for wildcards.  Or I can give you support for
spaces.  But not both.

Since spaced filenames are uncommon on my systems and on many
production servers that I've seen, or on any web dev's system,
I opted to drop support for spaces.  This means we get to keep
support for wildcard characters and the ability to trash more
than one file at a time.  Rather a nice feature, imho.

So if you know the secrets to supporting multiple args, some with
spaces in the names, others with wildcards, then do submit a patch.

I can generally be contacted via klaatu
at the domain of member dot fsf
dot org.
